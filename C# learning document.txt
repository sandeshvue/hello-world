26-feb-2021

Git commands:
a) git init: This command is used to intialise a blank repository. it creates a .git folder in the current working directory.                 [Done]
b) git commit : This comand is used to save the changes to the local repository. The command helps us to keep record of all the changes made. [Done]
c) git add : This command is used to add changes in the current directory to the staging area.                                                [Done]
d) git stautus : This command is used to display the state of the current repository and the staging area.                                    [Done]
e) git merge: This command is used to integrate different branches into a single branch.                                                      [Done]
f) git push:This command is used to upload the content from the local repository to the remote repository.                                    [Done]
g) git pull: This command is used to fetch the new commits and merge them into the local branch.                                              [Done]
h) git clone: This command is used to create a copyof the target repository or create a clone in a new directory at a new place.              [Done]
i) git branch: This command is used to create ,list,rename, and delete branches. Branch refers to an independent line of development.          [Done]
j) git check-out: This command is used to enable the navigation between the branches, this command works together with the git branch command. [Done]


sql server management studio
1. Connwct to the SQL server using SSMS                                                                                                                             [Done]
2. Create,altering and dropping/delete a data base:                                                                                                                 [Done]
                                    -- This can be done using two options
                                     a) Graphically using SSMS
				     b) Using Query--  Create database DatabaseName
				     --After creating the database, two files will get generate.
        			     a).MDF file-Data Files(which contains actual data)--Master data file.
				    b).LDF file-Transaction log file(used to recover the database)--Log data file.
				    --To alter a database name using query-(Alter Database DatabaseName Modify Name=Newdatabasename)
3)creating tables and detailed operations: Tables can be created graphically using SSMS and using query as well.                                                     [Done]
                                   -- foreign keys are used to enforce database integrity, which will point toa primary key in another table.
				   --Foriegn key constraints prevents invalid data form being inserted into the foreign key column.
4)Adding default constraint: A column default can be specified using Default constraint. The DEFAULT constraint is used to insert a default value into a column.      [Done]
                            If the value is not specified, then default value itself will be added to all new records.
5)Cascading referential integrity constraint: This will allows to define the actions taken by sql server, when a user tries to delete/update a key for an              [Done]
                                            already existing foriegn key is pointing to.
6)Adding check constraints: Check constraints is used to restrict the range of the value, that can be entered for a column.                                             [Done]
                          -- add constraint {constraint_name} check (boolean_expression)
                          -- in the above format if the boolean expression returns true, then the check constraint allows the value, unless it will not.			7)Identity column, its details. how to get the last generated identity column value.                                                                                     [Done]
8)Unique key constraints.                                                                                                                                               [Done]

25-feb-2021
38. List: List is one of the generic collection classes, it can be used to create a collection of any type(int,string etc)
          -- the object stored in the list can be accessed by their corresonding index. its size can be altered automatically.
          -- using this class lists can be sortable, can be manupulate.                                                                 
          --find() method of the list  class loops through each object in the list untill match is found.
	  so we can dictionary when you know the collection will be primarily used for lookups.                                          [Done]
39.Generic queue collection class: Queue is a generic first in first out collection class that is present in namespace.
                              --to add in to the queue enqueue() and to remove from the queue dequeue()
			     --to check whether the item is present in the queue conatins() method is used.
			     -- dequeue() method removes and returns the item at the begining of the queue.
			   --peek() method returns the item at the begining of the queuue, without returning.                             [Done]
40.Generic stack collection class:stack generic is last in first out collection class present in a namesapce.
                          --the last item which is pushed to the stack, will be the first item to be popped from the satck.
                          --to insert an item at the top of the stack push() method is used. same way to remove pop() method is used.     [Done]
41.Anonymous Methods: A method without name. this will allow us a way of creating delegate instances without  writing a seeperate method. [Done]
42.Lambda expression:(=>) Lambda operator is same as anonymous method, but here no need of mentioning delegate keyword explicitly and no need to specify 
                          the input parameter type too.
			--Lambda expressions are helpful to writing LINQ query expressions.                                               [Done]
			
24-feb-2021
34.Tasks assigned till date: a)display of folders in treeview.                                                                        [Done]
			  b)display of folders in treeview using recursive function.                                                  [Done]
			  c)to find factorial of number using recursive function.                                                     [Done]
			  d)display of folders inside a directory in treeview.                                                        [Done]
35. Indexers: Indexers are used to retrieve the data from specific column while looping.                                              [Done]
	     -- it allows the instances of classes to be inndexed as like arrays.                                                     [Done]  
36.Optional parameters: Four ways that can be used to make function parameters optional
			a) By using parameter array
			b) By metod overloading
			c)By mentioning the parameters by default
			d)By using optional attribute that is present in namespace.                                                   [Done]
37. Dictionary: A dictionary is a collection of key,value pairs. While creating a dictionary, key and value type should mention.
--Dictionary provides fast lookups for values using keys, these keys must be unique for their corresponding values.     [Done]




15-feb-2021.
30.Partial classes: Partial classes allow us to split a class into two or more files. this can also be use to split a struct or an interface by using a keyword "partial.".
                  --All the parts/partial classes must have the keyword "partial".
		  --These must have same access modifiers.
		  --If any parts are declared as abstract, then whole type is considered as abstract.
		  --If any part inherit a class, then whole type inherits the the class.
		  --Any members that are declared in a partial definition are available to all other parts of the partial class.                       [Done]
31.Partial methods: Partial class can have partial methods.
                   --Partial method declaration will have the definition and implementation,may be in seperate parts/same part of a partial class.
		   --Partial methods are private by default, should not use access modifier. private also we should not include.
		   --Should not include declaration and implementation at the same time.
		   --return type should be void.                                                                                                        [Done]
32.Thread: Thread is a light weight process,where as process term used by operating system to carryon the execution of a program  by providing the required resources.
             --Advantages: a)User interface will be fast.
		           b)To make efficient usage of processing time, whilw waiting for other operations to complete.
	     --Disadvantages: a)Multithreaded applications are difficult to write,understand,debug and maintain.	  
		              b)Threading will affect performance negatively, since context-switching is overhead.
	    --Threadstart Delegate: Thread is for executing a function, delegate is pointer to the function. so thread always requires a delegate to point the function,
	      which a thread wants to execute.                                                                                                          [Done]
33.Anonymous Methods: A method without name. this will allow us a way of creating delegate instances without having to write a seeperate method.        [Done]

12-feb-2021
25.Delegates usage in C#: Invoking/Calling a method using delegate
					a) Declare a delegate with the same signature(return type, type of parameter)
					as the method which i going to be invoked.
					b) Create an instance of the delegate,pass the method as the parameter to constructor.
					Finally by invoking the delegate one can invoke the method which is to be reuse.(done)
					c) If we want pass a function as a parameter, can use delegates.(done)
26.Exception handling : An exception is an error that occurs when a program is running.(dome)
27.Enums: if a program uses set of integral numbers, replacing them with enums, will makes the program more readable, maintainable.(done)
28.Acces Modifiers: a) private-- accessibility will be only with in the conatining class.
				 b) public -- accessibility will any where, i.e. no restriction.
				 c) protected-- accessibility will be with in the containing types and the types derived from the containing type.
				 d) internal--accessibility will be anywhere in the containing assembly.
				 e) protected internal--accessibility will be anywhere with in the containg assembly, and from with in a derived class in any another assembly.(done)
29. Using visual studio: a) textbox creation to displpay in the messagebox.(done)
                         b) tree view method of displaying. (done)


11-feb-2021
	17. Polymorphism and method overloading. [done]
	18. Method overiding -- a base class reference varialbe pointing the child class object,
							will invoke the overridden method in the child class instead of method in the base class.
		Method hiding -- a base class reference varialbe pointing the child class object, will invoke the base class method.
	19. Method overloading -- allows a class to have multiple methods with the same same name, but with a different number/type /kind of parameters, 
	20. Properties  -- get and set accessors to implement properties.
					-- no need of using get()/set() methods if we are using properties.
	21. structs and classes -- struct-value type, class-refernce type.
							-- by copying a struct into another struct, a new copy of struct will create in the stack.
								Modification made on one struct will not affect the value contained by the other struct.
							-- by copying a class into another class, both the reference varialbes will point to the same object in the heap.
								so by doing this value will get affect if any changes made to one of the  refered variable.
	22. Interfaces  -- keyword "interface" is used to create interfaces. like classes it can have properties, methods. But we can only do declaration and no implementation.
					-- it cannot have fields/variables.
					-- structs and class can inherit the interfaces. if inherited,then it must provide implementations for all interface members.
					-- a class/struct acn inherit more than one interface at the same time.
					-- if a interface2 inherits interface1 and if class1 inherits interface2, then class1 should provide implementation of all the members of interface1 and iterface2.
	23. Abstract class -- keyword abstract is used to create abstract class. we can only declare it and cannot be instantiable.
	24. Delegates	-- it is a safe type function pointer.(meaning the signature/type of the delegate should match with the signature of the class for which it is pointing to.
					-- syntax access_modifier delegate return_type delegate_name(parameters)
					-- to point to a function, we hv to create an instance of the delegate and then we pass the function as parameter to it. [In progress]
             
10-feb-2021
	11. Namespaces.																									[done]
	12. Class -- A class consists of data and behavior,
		where as data is represented by fields of the class behavior is represented by its functions/methods.		[done]
	13. Constructors and destructors -- constructors are used intialise the fields of the class.					[done]
									 -- this refers object/istance of a class.										[done]
									 -- destructors cleanup the resources that a class was holding.					[done]
	14. static class members and instance -- static members are invoked/calling by the name of the class itself.	[done]
	15. Inheritence -- allows to reusage of code when required, reduces time and errors.							[done]
					-- single class inheritance, i.e we cant have two base class.									[done]
	16. Method hiding.																								[done]
	17. polymorphism and method overloading																			[In progress]
  
09-feb-2021
	5.  Coversion of datatypes: a} implicit conversion -- done by the compiler when there is no loss of data,
									means converting smaller to bigger data type but reverse case is not done implicitly.		[done]
								b} explicit conversion -- typecast operator (int) before original type. we wont get exception
									if the source type value is larger than the destination type.								[done]
									-- Convert class -- we will get an exception if the source value greater.					[done]
									-- parse method is used to convert from string to other.
									throws an exception if it cannot parse the value.											[done]
									-- tryparse returns an boolean value(true/false) depending upon the condition.				[done]
	6.  Arrays and their decalaration, accessing the array elements.															[done]
	7.  Usage of --- if satement, switch, break, goto statement, while, do while loop, for loop.								[done]
	8.  Created github account and repository, gave access to you.																[done]
	9.  created branch,pull request. 																							[done]
	10. Methods, method parameters.																								[done]
	11. Namespaces.																												[In progress]

08-feb-2021
	1.  Introduction to C#: Namespace, class, reading and writing (concatenation and place holder) to the Console. 		[done]
	2.  Built in data types: Boolean, Integer, Float, string, escape sequence, verbatim laiteral. 						[done]
	3.  Operators in C#: Assignment op, arithmatic op, comparision op, conditional op, ternary op, null coalescing op.	[done]
	4.  Nullable data types: value types can't hold null value where as reference type can have null value.				[done]
							in order to do value type to hv null use "?" next to type of date.							[done]
