11-feb-2021

17.Polymorphism and method overloading. [done]
18.method overiding--a base class reference varialbe pointing the child class object, will invoke the overridden method in the child class instead of method in the base class. 
   method hiding --a base class reference varialbe pointing the child class object, will invoke the base class method.
19.Method overloading--allowsa class to have multiple methods with the same same name, but with a different number/type /kind of parameters, 
20.Properties-- get and set accessors to implement properties.
             -- no need of using get()/set() methods if we are using properties.
21. structs and classes-- struct-value type, class-refernce type.
                       -- by copying a struct into another struct, a new copy of struct will create in the stack. modification made on one struct will not affect the value contained by the other struct.
                       -- by copying a class into another class, both the reference varialbes will point to the same object in the heap. so by doing this value will get affect if any changes made to one of the  refered variable.
22. Interfaces-- keyword "interface" is used to create interfaces. like classes it can have properties,methods. but we can only do declaration and no implementation.
  	      -- it cannot have fields/variables.
	      -- structs and class can inherit the interfaces. if inherited,then it must provide implementations for all interface members.
              -- a class/struct acn inherit more than one interface at the same time.
              -- if a interface2 inherits interface1 and if class1 inherits interface2, then class1 should provide implementation of all the members of interface1 and iterface2.
23. Abstract class-- keyword abstract is used to create abstract class. we can only declare it and cannot be instantiable.
24. Delegates--it is a safe type function pointer.(meaning the signature/type of the delegate should match with the signature of the class for which it is pointing to.
             -- syntax access_modifier delegate return_type delegate_name(parameters)
	     -- to point to a function, we hv to create an instance of the delegate and then we pass the function as parameter to it.(U/p)
             
10-feb-2021
11.Namespaces. [done]
12. class--A class consists of data and behavior, whwere as data is represented by fields of the class
	   behavior is represented by its functions/methods. [done]
13.constructors and destructors-- constructors are used intialise the fields of the class.[done]
				--this refers object/istance of a class.[done]
				--destructors cleanup the resources that a class was holding. [done]
14. static class members and instance--static members are invoked/calling by the name of the class itself.[done]
15. Inheritence-- allows to reusage of code when required, reduces time and errors.[done]
               --single class inheritance, i.e we cant have two base class.[done]
16. Method hiding. [done]
17. polymorphism and method overloading [In progress]
  
09-feb-2021

5.coversion of datatypes: a} implicit conversion-- done by the compiler when there is no loss of data, means converting smaller to bigger data type but reverse case is not done implicitly.[done]
                          b} explicit conversion-- typecast operator (int) before original type. we wont get exception if the source type value is larger than the destination type.[done]
                                                -- Convert class-- we will get an exception if the source value greater. [done]
						-- parse method is used to convert from string to other. throws an exception if it cannot parse the value. [done]
						--tryparse returns an boolean value(true/false) depending upon the condition.[done]
6.arrays and their decalaration, accessing the array elements.[done]
7. Usage of ---if satement,switch,break,goto statement, while, do while loop, for loop.[done]
8. Created github account and repository, gave access to you.[done]
9. created branch,pull request. [done]
10.Methods, method parameters. [done]
11.Namespaces.(U/p)

08-feb-2021
1. Introduction to C#: Namespace,class, reading and writing(concatenation and place holder) to the Console.[done]
2. Built in data types: Boolean, Integer, Float, string, escape sequence, verbatim laiteral.[done]
3. Operators in C#: Assignment op,arithmatic op,comparision op,conditional op,ternary op, null coalescing op.[done]
4. nullable data types: value types can't hold null value where as reference type can have null value.[done]
                        in order to do value type to hv null use "?" next to type of date.[done]
